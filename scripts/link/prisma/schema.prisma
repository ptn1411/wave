generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model announcement_user {
  announcement_id Int           @db.UnsignedInt
  user_id         BigInt        @db.UnsignedBigInt
  announcements   announcements @relation(fields: [announcement_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "announcement_user_announcement_id_foreign")
  users           users         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "announcement_user_user_id_foreign")

  @@index([announcement_id], map: "announcement_user_announcement_id_index")
  @@index([user_id], map: "announcement_user_user_id_index")
  @@ignore
}

model announcements {
  id                Int                 @id @default(autoincrement()) @db.UnsignedInt
  title             String              @default("")
  description       String
  body              String              @db.Text
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  announcement_user announcement_user[] @ignore
}

model api_keys {
  id           Int       @id @default(autoincrement()) @db.UnsignedInt
  user_id      Int       @db.UnsignedInt
  name         String
  key          String    @unique(map: "api_tokens_token_unique") @default("") @db.VarChar(60)
  last_used_at DateTime? @db.DateTime(0)
  created_at   DateTime? @db.Timestamp(0)
  updated_at   DateTime? @db.Timestamp(0)
}

model categories {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  parent_id        Int?         @db.UnsignedInt
  order            Int          @default(1)
  name             String
  slug             String       @unique(map: "categories_slug_unique")
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
  categories       categories?  @relation("categoriesTocategories", fields: [parent_id], references: [id], map: "categories_parent_id_foreign")
  other_categories categories[] @relation("categoriesTocategories")

  @@index([parent_id], map: "categories_parent_id_foreign")
}

model collections {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  name        String?   @db.VarChar(255)
  description String?   @db.LongText
  parent_id   Int?      @db.UnsignedInt
  isPublic    Int?      @db.TinyInt
  author_id   BigInt?
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@index([author_id], map: "collections_author_id_index")
  @@index([parent_id], map: "collections_parent_id_index")
}

model contacts {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String?   @db.VarChar(255)
  email      String?   @db.VarChar(255)
  subject    String?   @db.VarChar(255)
  message    String?   @db.LongText
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  ip_address String?   @db.VarChar(255)
}

model data_rows {
  id           Int        @id @default(autoincrement()) @db.UnsignedInt
  data_type_id Int        @db.UnsignedInt
  field        String
  type         String
  display_name String
  required     Boolean    @default(false)
  browse       Boolean    @default(true)
  read         Boolean    @default(true)
  edit         Boolean    @default(true)
  add          Boolean    @default(true)
  delete       Boolean    @default(true)
  details      String?    @db.Text
  order        Int        @default(1)
  data_types   data_types @relation(fields: [data_type_id], references: [id], onDelete: Cascade, map: "data_rows_data_type_id_foreign")

  @@index([data_type_id], map: "data_rows_data_type_id_foreign")
}

model data_types {
  id                    Int         @id @default(autoincrement()) @db.UnsignedInt
  name                  String      @unique(map: "data_types_name_unique")
  slug                  String      @unique(map: "data_types_slug_unique")
  display_name_singular String
  display_name_plural   String
  icon                  String?
  model_name            String?
  policy_name           String?
  controller            String?
  description           String?
  generate_permissions  Boolean     @default(false)
  server_side           Int         @default(0) @db.TinyInt
  details               String?     @db.Text
  created_at            DateTime?   @db.Timestamp(0)
  updated_at            DateTime?   @db.Timestamp(0)
  data_rows             data_rows[]
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model link_collections {
  link_id       Int @db.UnsignedInt
  collection_id Int @db.UnsignedInt

  @@index([collection_id], map: "link_collections_collection_id_index")
  @@index([link_id], map: "link_collections_link_id_index")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model link_tags {
  link_id Int @db.UnsignedInt
  tag_id  Int @db.UnsignedInt

  @@index([link_id], map: "link_tags_link_id_index")
  @@index([tag_id], map: "link_tags_tag_id_index")
  @@ignore
}

model links {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  name        String?   @db.LongText
  type        String?   @default("url") @db.VarChar(255)
  description String?   @db.LongText
  url         String?   @db.LongText
  textContent String?   @db.LongText
  preview     String?   @db.VarChar(255)
  image       String?   @db.VarChar(255)
  pdf         String?   @db.VarChar(255)
  importDate  DateTime? @db.DateTime(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  author_id   BigInt?
  readable    String?   @db.VarChar(255)
  monolith    String?   @db.VarChar(255)

  @@index([author_id], map: "links_author_id_index")
}

model menu_items {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  menu_id    Int?      @db.UnsignedInt
  title      String
  url        String
  target     String    @default("_self")
  icon_class String?
  color      String?
  parent_id  Int?
  order      Int
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  route      String?
  parameters String?   @db.Text
  menus      menus?    @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "menu_items_menu_id_foreign")

  @@index([menu_id], map: "menu_items_menu_id_foreign")
}

model menus {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  name       String       @unique(map: "menus_name_unique")
  created_at DateTime?    @db.Timestamp(0)
  updated_at DateTime?    @db.Timestamp(0)
  menu_items menu_items[]
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model notifications {
  id              String    @id @db.Char(36)
  type            String
  notifiable_id   Int       @db.UnsignedInt
  notifiable_type String
  data            String    @db.Text
  read_at         DateTime? @db.DateTime(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)

  @@index([notifiable_id, notifiable_type], map: "notifications_notifiable_id_notifiable_type_index")
}

model paddle_subscriptions {
  id              BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  subscription_id String    @unique(map: "paddle_subscriptions_subscription_id_unique") @db.VarChar(255)
  plan_id         String?   @db.VarChar(255)
  user_id         Int?
  status          String?
  update_url      String?   @db.Text
  cancel_url      String?   @db.Text
  cancelled_at    DateTime? @db.DateTime(0)
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  last_payment_at DateTime? @db.Timestamp(0)
  next_payment_at DateTime? @db.Timestamp(0)
}

model pages {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  author_id        Int
  title            String
  excerpt          String?      @db.Text
  body             String?      @db.Text
  image            String?
  slug             String       @unique(map: "pages_slug_unique")
  meta_description String?      @db.Text
  meta_keywords    String?      @db.Text
  status           pages_status @default(INACTIVE)
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model password_resets {
  email      String
  token      String
  created_at DateTime? @db.Timestamp(0)

  @@index([email], map: "password_resets_email_index")
  @@ignore
}

model permission_groups {
  id   Int    @id @default(autoincrement()) @db.UnsignedInt
  name String @unique(map: "permission_groups_name_unique")
}

model permission_role {
  permission_id BigInt      @db.UnsignedBigInt
  role_id       BigInt      @db.UnsignedBigInt
  permissions   permissions @relation(fields: [permission_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "permission_role_permission_id_foreign")
  roles         roles       @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "permission_role_role_id_foreign")

  @@id([permission_id, role_id])
  @@index([permission_id], map: "permission_role_permission_id_index")
  @@index([role_id], map: "permission_role_role_id_index")
}

model permissions {
  id                  BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  key                 String
  table_name          String?
  created_at          DateTime?         @db.Timestamp(0)
  updated_at          DateTime?         @db.Timestamp(0)
  permission_group_id Int?              @db.UnsignedInt
  permission_role     permission_role[]

  @@index([key], map: "permissions_key_index")
}

model plans {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  name        String
  slug        String    @unique(map: "plans_slug_unique")
  description String?   @db.Text
  features    String
  plan_id     String    @default("")
  role_id     BigInt    @db.UnsignedBigInt
  default     Boolean   @default(false)
  price       String
  trial_days  Int       @default(0)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  roles       roles     @relation(fields: [role_id], references: [id], onUpdate: Restrict, map: "plans_role_id_foreign")

  @@index([role_id], map: "plans_role_id_foreign")
}

model posts {
  id               Int          @id @default(autoincrement()) @db.UnsignedInt
  author_id        Int
  category_id      Int?
  title            String
  seo_title        String?
  excerpt          String?      @db.Text
  body             String       @db.Text
  image            String?
  slug             String       @unique(map: "posts_slug_unique")
  meta_description String?      @db.Text
  meta_keywords    String?      @db.Text
  status           posts_status @default(DRAFT)
  featured         Boolean      @default(false)
  created_at       DateTime?    @db.Timestamp(0)
  updated_at       DateTime?    @db.Timestamp(0)
}

model roles {
  id              BigInt            @id @default(autoincrement()) @db.UnsignedBigInt
  name            String            @unique(map: "roles_name_unique")
  display_name    String
  created_at      DateTime?         @db.Timestamp(0)
  updated_at      DateTime?         @db.Timestamp(0)
  permission_role permission_role[]
  plans           plans[]
  user_roles      user_roles[]
  users           users[]
}

model settings {
  id           Int     @id @default(autoincrement()) @db.UnsignedInt
  key          String  @unique(map: "settings_key_unique")
  display_name String
  value        String? @db.Text
  details      String? @db.Text
  type         String
  order        Int     @default(1)
  group        String?
}

model tags {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String?   @db.VarChar(255)
  author_id  BigInt?
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([author_id], map: "tags_author_id_index")
}

model theme_options {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  theme_id   Int       @db.UnsignedInt
  key        String    @db.VarChar(255)
  value      String?   @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  themes     themes    @relation(fields: [theme_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "theme_options_theme_id_foreign")

  @@index([theme_id], map: "theme_options_theme_id_index")
}

model themes {
  id                    Int                     @id @default(autoincrement()) @db.UnsignedInt
  name                  String                  @db.VarChar(255)
  folder                String                  @unique(map: "themes_folder_unique")
  active                Boolean                 @default(false)
  version               String                  @default("") @db.VarChar(255)
  created_at            DateTime?               @db.Timestamp(0)
  updated_at            DateTime?               @db.Timestamp(0)
  theme_options         theme_options[]
  voyager_theme_options voyager_theme_options[]
}

model translations {
  id          Int       @id @default(autoincrement()) @db.UnsignedInt
  table_name  String
  column_name String
  foreign_key Int       @db.UnsignedInt
  locale      String
  value       String    @db.Text
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)

  @@unique([table_name, column_name, foreign_key, locale], map: "translations_table_name_column_name_foreign_key_locale_unique")
}

model user_roles {
  user_id BigInt @db.UnsignedBigInt
  role_id BigInt @db.UnsignedBigInt
  roles   roles  @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_role_id_foreign")
  users   users  @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "user_roles_user_id_foreign")

  @@id([user_id, role_id])
  @@index([role_id], map: "user_roles_role_id_index")
  @@index([user_id], map: "user_roles_user_id_index")
}

model users {
  id                BigInt              @id @default(autoincrement()) @db.UnsignedBigInt
  role_id           BigInt?             @db.UnsignedBigInt
  name              String
  email             String              @unique(map: "users_email_unique")
  avatar            String?             @default("users/default.png")
  email_verified_at DateTime?           @db.Timestamp(0)
  password          String
  remember_token    String?             @db.VarChar(100)
  settings          String?             @db.Text
  created_at        DateTime?           @db.Timestamp(0)
  updated_at        DateTime?           @db.Timestamp(0)
  username          String              @unique(map: "users_username_unique")
  stripe_id         String?
  card_brand        String?
  card_last_four    String?
  trial_ends_at     DateTime?           @db.DateTime(0)
  verification_code String?
  verified          Boolean?
  announcement_user announcement_user[] @ignore
  user_roles        user_roles[]
  roles             roles?              @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_role_id_foreign")

  @@index([role_id], map: "users_role_id_foreign")
}

model views {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  post_id    Int?      @db.UnsignedInt
  view_count Int?      @default(0)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)

  @@index([post_id], map: "views_post_id_index")
}

model voyager_theme_options {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  theme_id   Int       @db.UnsignedInt
  key        String
  value      String?   @db.Text
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  themes     themes    @relation(fields: [theme_id], references: [id], onDelete: Cascade, map: "voyager_theme_options_ibfk_1")

  @@index([theme_id], map: "voyager_theme_options_theme_id_index")
}

model voyager_themes {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  name       String
  folder     String    @unique(map: "voyager_themes_folder_unique")
  active     Boolean   @default(false)
  version    String    @default("")
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
}

model wave_key_values {
  id            Int    @id @default(autoincrement()) @db.UnsignedInt
  type          String
  keyvalue_id   Int    @db.UnsignedInt
  keyvalue_type String
  key           String
  value         String

  @@unique([keyvalue_id, keyvalue_type, key], map: "wave_key_values_keyvalue_id_keyvalue_type_key_unique")
}

enum pages_status {
  ACTIVE
  INACTIVE
}

enum posts_status {
  PUBLISHED
  DRAFT
  PENDING
}
